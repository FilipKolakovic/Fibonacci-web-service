// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fibonacci.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Fibonacci_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Fibonacci_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Fibonacci_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Fibonacci_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Fibonacci_2eproto;
namespace fibonacci {
class FibonacciReply;
struct FibonacciReplyDefaultTypeInternal;
extern FibonacciReplyDefaultTypeInternal _FibonacciReply_default_instance_;
class FibonacciRequest;
struct FibonacciRequestDefaultTypeInternal;
extern FibonacciRequestDefaultTypeInternal _FibonacciRequest_default_instance_;
}  // namespace fibonacci
PROTOBUF_NAMESPACE_OPEN
template<> ::fibonacci::FibonacciReply* Arena::CreateMaybeMessage<::fibonacci::FibonacciReply>(Arena*);
template<> ::fibonacci::FibonacciRequest* Arena::CreateMaybeMessage<::fibonacci::FibonacciRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fibonacci {

// ===================================================================

class FibonacciRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fibonacci.FibonacciRequest) */ {
 public:
  inline FibonacciRequest() : FibonacciRequest(nullptr) {}
  ~FibonacciRequest() override;
  explicit PROTOBUF_CONSTEXPR FibonacciRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FibonacciRequest(const FibonacciRequest& from);
  FibonacciRequest(FibonacciRequest&& from) noexcept
    : FibonacciRequest() {
    *this = ::std::move(from);
  }

  inline FibonacciRequest& operator=(const FibonacciRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FibonacciRequest& operator=(FibonacciRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FibonacciRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FibonacciRequest* internal_default_instance() {
    return reinterpret_cast<const FibonacciRequest*>(
               &_FibonacciRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FibonacciRequest& a, FibonacciRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FibonacciRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FibonacciRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FibonacciRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FibonacciRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FibonacciRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FibonacciRequest& from) {
    FibonacciRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FibonacciRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fibonacci.FibonacciRequest";
  }
  protected:
  explicit FibonacciRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // int32 payload = 1;
  void clear_payload();
  int32_t payload() const;
  void set_payload(int32_t value);
  private:
  int32_t _internal_payload() const;
  void _internal_set_payload(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fibonacci.FibonacciRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Fibonacci_2eproto;
};
// -------------------------------------------------------------------

class FibonacciReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fibonacci.FibonacciReply) */ {
 public:
  inline FibonacciReply() : FibonacciReply(nullptr) {}
  ~FibonacciReply() override;
  explicit PROTOBUF_CONSTEXPR FibonacciReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FibonacciReply(const FibonacciReply& from);
  FibonacciReply(FibonacciReply&& from) noexcept
    : FibonacciReply() {
    *this = ::std::move(from);
  }

  inline FibonacciReply& operator=(const FibonacciReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FibonacciReply& operator=(FibonacciReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FibonacciReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FibonacciReply* internal_default_instance() {
    return reinterpret_cast<const FibonacciReply*>(
               &_FibonacciReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FibonacciReply& a, FibonacciReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FibonacciReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FibonacciReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FibonacciReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FibonacciReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FibonacciReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FibonacciReply& from) {
    FibonacciReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FibonacciReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fibonacci.FibonacciReply";
  }
  protected:
  explicit FibonacciReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFibFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
    kTestPFieldNumber = 5,
    kCountFieldNumber = 4,
  };
  // int64 fib = 1;
  void clear_fib();
  int64_t fib() const;
  void set_fib(int64_t value);
  private:
  int64_t _internal_fib() const;
  void _internal_set_fib(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 duration = 3;
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // int64 testP = 5;
  void clear_testp();
  int64_t testp() const;
  void set_testp(int64_t value);
  private:
  int64_t _internal_testp() const;
  void _internal_set_testp(int64_t value);
  public:

  // int32 count = 4;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fibonacci.FibonacciReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t fib_;
    int64_t timestamp_;
    int64_t duration_;
    int64_t testp_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Fibonacci_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FibonacciRequest

// int32 payload = 1;
inline void FibonacciRequest::clear_payload() {
  _impl_.payload_ = 0;
}
inline int32_t FibonacciRequest::_internal_payload() const {
  return _impl_.payload_;
}
inline int32_t FibonacciRequest::payload() const {
  // @@protoc_insertion_point(field_get:fibonacci.FibonacciRequest.payload)
  return _internal_payload();
}
inline void FibonacciRequest::_internal_set_payload(int32_t value) {
  
  _impl_.payload_ = value;
}
inline void FibonacciRequest::set_payload(int32_t value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:fibonacci.FibonacciRequest.payload)
}

// -------------------------------------------------------------------

// FibonacciReply

// int64 fib = 1;
inline void FibonacciReply::clear_fib() {
  _impl_.fib_ = int64_t{0};
}
inline int64_t FibonacciReply::_internal_fib() const {
  return _impl_.fib_;
}
inline int64_t FibonacciReply::fib() const {
  // @@protoc_insertion_point(field_get:fibonacci.FibonacciReply.fib)
  return _internal_fib();
}
inline void FibonacciReply::_internal_set_fib(int64_t value) {
  
  _impl_.fib_ = value;
}
inline void FibonacciReply::set_fib(int64_t value) {
  _internal_set_fib(value);
  // @@protoc_insertion_point(field_set:fibonacci.FibonacciReply.fib)
}

// int64 timestamp = 2;
inline void FibonacciReply::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t FibonacciReply::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t FibonacciReply::timestamp() const {
  // @@protoc_insertion_point(field_get:fibonacci.FibonacciReply.timestamp)
  return _internal_timestamp();
}
inline void FibonacciReply::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void FibonacciReply::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fibonacci.FibonacciReply.timestamp)
}

// int64 duration = 3;
inline void FibonacciReply::clear_duration() {
  _impl_.duration_ = int64_t{0};
}
inline int64_t FibonacciReply::_internal_duration() const {
  return _impl_.duration_;
}
inline int64_t FibonacciReply::duration() const {
  // @@protoc_insertion_point(field_get:fibonacci.FibonacciReply.duration)
  return _internal_duration();
}
inline void FibonacciReply::_internal_set_duration(int64_t value) {
  
  _impl_.duration_ = value;
}
inline void FibonacciReply::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:fibonacci.FibonacciReply.duration)
}

// int32 count = 4;
inline void FibonacciReply::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t FibonacciReply::_internal_count() const {
  return _impl_.count_;
}
inline int32_t FibonacciReply::count() const {
  // @@protoc_insertion_point(field_get:fibonacci.FibonacciReply.count)
  return _internal_count();
}
inline void FibonacciReply::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void FibonacciReply::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:fibonacci.FibonacciReply.count)
}

// int64 testP = 5;
inline void FibonacciReply::clear_testp() {
  _impl_.testp_ = int64_t{0};
}
inline int64_t FibonacciReply::_internal_testp() const {
  return _impl_.testp_;
}
inline int64_t FibonacciReply::testp() const {
  // @@protoc_insertion_point(field_get:fibonacci.FibonacciReply.testP)
  return _internal_testp();
}
inline void FibonacciReply::_internal_set_testp(int64_t value) {
  
  _impl_.testp_ = value;
}
inline void FibonacciReply::set_testp(int64_t value) {
  _internal_set_testp(value);
  // @@protoc_insertion_point(field_set:fibonacci.FibonacciReply.testP)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fibonacci

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Fibonacci_2eproto
